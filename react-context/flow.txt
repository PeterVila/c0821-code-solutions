For each feature in the application, describe the flow of the code in writing, including the client, server, and database. How does the code work? 

(USER CAN SIGN UP)
1. New users will be brought to <Auth /> with the route.path changed to "sign-in" (auth.jsx)
2. Users can click on "Register now" to change the route.path to "sign-up"
3. After clicking the 'Register' button, handleSubmit in 'components/auth-form.jsx' is called to fetch a POST request.
4. In 'server/index.js', a successful username and password through POST, INSERTS the 'username' and the 'hashedPassword' through argon2 into the 'users' table along with an autogenerated 'userId' and 'createdAt'
5. If sign-up is successful, window.location.hash gets changed to 'sign-in'. 
- IF SIGN UP IS UNSUCCESSFUL, form reloads and an error below is logged not to the client.

(USER CAN SIGN IN)
1. With the username and hashed password in the DB, if the user signs in, fetch gets called with '/api/auth/sign-in' to verify the username/password matches.
- IF NO MATCH IS FOUND, nothing happens. (maybe include a notification to try again)
2. After the user signs in, the token gets saved to with localStorage .setItem('react-context-jwt', token) with handleSignIn(result) in 'client/app.jsx'
3. <App /> rerenders then renders <Home /> with context.user with the users properties through <AppContext.Provider value={contextValue}
  -contextValue = { user, route, handleSignIn, handleSignOut}; 'app.jsx' render()

(IF USER TOKEN IS ALREADY SAVED IN LOCALSTORAGE)
1. On componentDidMount, checks the localStorage to see if a token stored, if true, decodeToken() will assign it to this.state.user and sets isAuthorizing to false.
2. Afterwards since user.state.route = "", user will be brought to <Home />
3. Else, user will be 'null' and the page will be directed to <Auth /> to register or to sign in(default).

(USER CAN SIGN OUT)
1.  The user can now click "Sign out" to removed the token from local-storage and sets the current state to {user:null}. 
2. The page will rerender and go through render(), then our <pageContainer> does renderPage() and checks the "path". 
3. Since this.state.user is now null and path doesn't exist, in 'client/pages/home.jsx' it redirects our user to route.path, "sign-in". 

--------------------------------------------------------------------------
(ERROR)
-If a user tries to register, but the Account already exists, it doesn't create and the userID is skipped.
(REASON)
- the user ids are auto-generated by postgres during the insert, but if an insert fails, the generated id is discarded
-since the id isn’t used for ordering or anything like that, it doesn’t need to be “retried”
